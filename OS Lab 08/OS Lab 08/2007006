//process control

//fork,exit
	
	#include <stdio.h>
	#include <unistd.h>
	#include <stdlib.h>
	#include <sys/types.h>
	#include <sys/wait.h>

	int main() {
	    pid_t pid = fork();  // Create a new process

	    if (pid < 0) {
		// If fork() fails
		perror("fork failed");
		return 1;
	    }

	    if (pid == 0) {
		// This block will be executed by the child process
		printf("Child Process: PID = %d, Parent PID = %d\n", getpid(), getppid());
		
		// Terminate the child process
		exit(0);  // Exit with status 0 (success)
	    } else {
		// This block will be executed by the parent process
		printf("Parent Process: PID = %d, Child PID = %d\n", getpid(), pid);

		// Wait for the child process to finish
		wait(NULL);  // Wait for any child process to finish

		printf("Parent Process: Child has exited, now exiting parent.\n");

		// Terminate the parent process
		exit(0);  // Exit with status 0 (success)
	    }

	    return 0;
	}
	

//file management

//read

	#include <fcntl.h>
	#include <unistd.h>
	#include <stdio.h>

	#define BUF_SIZE 1024

	int main() {
	    char buffer[BUF_SIZE];  // Buffer to store data
	    ssize_t bytesRead;

	    // Read from standard input (file descriptor 0)
	    while ((bytesRead = read(0, buffer, BUF_SIZE)) > 0) {
		// Write the data read to standard output (file descriptor 1)
		write(1, buffer, bytesRead);
	    }

	    if (bytesRead == -1) {
		perror("read");
		return 1;  // Exit with an error code
	    }

	    return 0;
	}


//open,close,rename

	#include <fcntl.h>
	#include <unistd.h>
	#include <stdio.h>
	#include <string.h>

	int main() {
	    const char *old_filename = "oldfile.txt";
	    const char *new_filename = "newfile.txt";
	    const char *content = "This is some sample content for the file.\n";
	    int fd;
	    ssize_t bytesWritten;

	    // Open the file with read-write permissions (create if it doesn't exist)
	    fd = open(old_filename, O_WRONLY | O_CREAT | O_TRUNC, 0644);
	    if (fd == -1) {
		perror("Error opening file");
		return 1;
	    }

	    // Write content to the file
	    bytesWritten = write(fd, content, strlen(content));
	    if (bytesWritten == -1) {
		perror("Error writing to file");
		close(fd);  // Close the file before exiting
		return 1;
	    }

	    // Close the file after writing
	    if (close(fd) == -1) {
		perror("Error closing file");
		return 1;
	    }

	    printf("File '%s' created and content written.\n", old_filename);

	    // Rename the file
	    if (rename(old_filename, new_filename) == -1) {
		perror("Error renaming file");
		return 1;
	    }

	    printf("File renamed to '%s'.\n", new_filename);

	    return 0;
	}


//chmod for file permission

	#include <stdio.h>
	#include <stdlib.h>
	#include <sys/stat.h>
	#include <unistd.h>

	int main() {
	    const char *filename = "example.txt";
	    mode_t mode = 0644;  // rw-r--r-- in octal

	    // Change the permissions of the file
	    if (chmod(filename, mode) == -1) {
		perror("Error changing file permissions");
		return 1;
	    }

	    printf("Permissions of '%s' have been changed successfully.\n", filename);
	    return 0;
	}

//mkdir, rmdir for creating and deleting file


	#include <stdio.h>
	#include <stdlib.h>
	#include <sys/stat.h>
	#include <unistd.h>
	#include <errno.h>

	int main() {
	    const char *dir_name = "example_directory";
	    mode_t mode = 0755;  // rwxr-xr-x permissions

	    // Create a new directory
	    if (mkdir(dir_name, mode) == -1) {
		perror("Error creating directory");
		return 1;
	    }
	    printf("Directory '%s' created successfully with mode %o.\n", dir_name, mode);

	    // Now, attempt to remove the directory
	    if (rmdir(dir_name) == -1) {
		perror("Error removing directory");
		return 1;
	    }
	    printf("Directory '%s' removed successfully.\n", dir_name);

	    return 0;
	}




